//including the libraries
#include <SoftwareSerial.h> // TX RX software library for bluetooth

//Initializing pins for bluetooth Module
int bluetoothTx = 2; // bluetooth tx to 2 pin
int bluetoothRx = 3; // bluetooth rx to 3 pin
SoftwareSerial bluetooth(bluetoothTx, bluetoothRx);
long duration, distance, FrontSensor,RightSensor,BackSensor, LeftSensor;
int tr1 = 13;
int echo1 = A0;
int tr2 = 12;
int echo2 = A1;
int tr3 = 5;
int echo3 = A2;
int tr4 = 4;
int echo4 = A3;
int LED = A4;
//Front Motor Pins  
int Enable1 = 6;
int Motor1_Pin1 = 7;  
int Motor1_Pin2 = 8;  

//Back Motor Pins      
int Motor2_Pin1 = 9; 
int Motor2_Pin2 = 10;
int Enable2 = 11; 

char command ; //variable to store the data

void setup() 
{       
  //Set the baud rate of serial communication and bluetooth module at same rate.
  Serial.begin(9600);  
  bluetooth.begin(9600);

  pinMode(Motor1_Pin1, OUTPUT);  
  pinMode(Motor1_Pin2, OUTPUT);
  pinMode(Enable1, OUTPUT);
  pinMode(Motor2_Pin1, OUTPUT);  
  pinMode(Motor2_Pin2, OUTPUT);
  pinMode(Enable2, OUTPUT); 
  pinMode(tr1, OUTPUT); 
  pinMode(echo1, INPUT);
  pinMode(tr2, OUTPUT);
  pinMode(echo2, INPUT);
  pinMode(tr3, OUTPUT); 
  pinMode(echo3, INPUT);
  pinMode(tr4, OUTPUT);
  pinMode(echo4, INPUT);
  pinMode(A4,OUTPUT);

  //Setting the enable and RGB LED pins as HIGH.
  digitalWrite(Enable1, HIGH);
  digitalWrite(Enable2, HIGH);
}
void SonarSensor(int trigPin, int echoPin) {
    digitalWrite(trigPin, LOW);
    digitalWrite(trigPin, HIGH);
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    distance = (duration/2)*0.0343;
  }
void loop(){
  if(bluetooth.available() > 0){  //Checking if there is some data available or not
    command = bluetooth.read();   //Storing the data in the 'command' variable
    Serial.println(command);
    digitalWrite(A4,LOW);
    unsigned long currentMillis = millis();
    int counter = 0;      //Printing it on the serial monitor
    //Change pin mode only if new command is different from previous.   
    switch(command){
    case 'F':  //Moving the Car Forward
      SonarSensor(tr2, echo2);
      FrontSensor = distance;
      Serial.print(FrontSensor);
      if(FrontSensor <= 40){
        digitalWrite(Motor2_Pin1, LOW);
        digitalWrite(Motor2_Pin2, HIGH);
        digitalWrite(Motor1_Pin1, LOW);
        digitalWrite(Motor1_Pin2, HIGH);
        stopCar();
      }else{
        digitalWrite(Motor2_Pin2, LOW);
        digitalWrite(Motor2_Pin1, HIGH);
        digitalWrite(Motor1_Pin1, HIGH);
        digitalWrite(Motor1_Pin2, LOW);
      };
      BackSensor = 0;
      if(BackSensor <= 40 && currentMillis - previousMillis >= interval){
        digitalWrite(LED,HIGH);
      }else{
        digitalWrite(LED,LOW);
        currentMillis = 0;
      }
      previousMillis = currentMillis;
      break;
    case 'B':  //Moving the Car Backward
      SonarSensor(tr3, echo3);
      RightSensor = distance;
      SonarSensor(tr1, echo1);
      BackSensor = distance;
      SonarSensor(tr4, echo4);
      LeftSensor = distance;
      Serial.print(LeftSensor);
      Serial.print(",");
      Serial.print(BackSensor);
      Serial.print(",");
      Serial.print(RightSensor);
      if(LeftSensor <= 20 ||BackSensor <= 20 || RightSensor <= 20){
        stopCar();
      
      }else{
        digitalWrite(Motor2_Pin1, LOW);
        digitalWrite(Motor2_Pin2, HIGH);
        digitalWrite(Motor1_Pin1, LOW);
        digitalWrite(Motor1_Pin2, HIGH);
      };
      break;
    case 'L':  //Moving the Car Left
      digitalWrite(Motor2_Pin2, LOW);
      digitalWrite(Motor2_Pin1, HIGH);
      digitalWrite(Motor1_Pin1, LOW);
      digitalWrite(Motor1_Pin2, LOW);
      break;
    case 'R':   //Moving the Car Right
      digitalWrite(Motor2_Pin2, LOW);
      digitalWrite(Motor2_Pin1, LOW);
      digitalWrite(Motor1_Pin1, HIGH);
      digitalWrite(Motor1_Pin2, LOW);
      break;
    case 'S':   //Stop
      stopCar();
      break; 
    case 'I':  //Moving the Car Forward right
      digitalWrite(Motor2_Pin2, HIGH);
      digitalWrite(Motor2_Pin1, LOW);
      digitalWrite(Motor1_Pin1, HIGH);
      digitalWrite(Motor1_Pin2, LOW);
      break; 
    case 'J':  //Moving the Car backward right
      digitalWrite(Motor1_Pin2, LOW);
      digitalWrite(Motor1_Pin1, HIGH);
      digitalWrite(Motor2_Pin1, LOW);
      digitalWrite(Motor2_Pin2, HIGH);
      break;        
    case 'G':  //Moving the Car Forward left
      digitalWrite(Motor2_Pin2, LOW);
      digitalWrite(Motor2_Pin1, HIGH);
      digitalWrite(Motor1_Pin1, LOW);
      digitalWrite(Motor1_Pin2, HIGH);
      break; 
    case 'H':  //Moving the Car backward left
      digitalWrite(Motor2_Pin1, LOW);
      digitalWrite(Motor2_Pin2, HIGH);
      digitalWrite(Motor1_Pin1, LOW);
      digitalWrite(Motor1_Pin2, HIGH);
      break;
    //Controlling the Speed of Car  
    default:  //Get velocity
      break;
    }
    }
  }
  void stopCar(){
      digitalWrite(Motor2_Pin2, LOW);
      digitalWrite(Motor2_Pin1, LOW);
      digitalWrite(Motor1_Pin2, LOW);
      digitalWrite(Motor1_Pin1, LOW);
  } 
