// including the libraries
#include <SoftwareSerial.h> // TX RX software library for Bluetooth

// Initializing pins for Bluetooth Module
int bluetoothTx = 2; // Bluetooth tx to 2 pin
int bluetoothRx = 3; // Bluetooth rx to 3 pin
SoftwareSerial bluetooth(bluetoothTx, bluetoothRx);

// Front Motor Pins
int Enable1 = 6;
int Motor1_Pin1 = 7;
int Motor1_Pin2 = 8;

// Back Motor Pins
int Motor2_Pin1 = 9;
int Motor2_Pin2 = 10;
int Enable2 = 11;

// Ultrasonic sensor pins
int trigPin1 = A5;   // Adjusted for Arduino Uno
int echoPin1 = A6;   // Adjusted for Arduino Uno
int trigPin2 = A0;   // Adjusted for Arduino Uno
int echoPin2 = A1;   // Adjusted for Arduino Uno
int trigPin3 = A2;   // Adjusted for Arduino Uno
int echoPin3 = A3;   // Adjusted for Arduino Uno

char command; // variable to store the data
int velocity = 0; // Variable to control the speed of motor

void setup()
{
  // Set the baud rate of serial communication and Bluetooth module at the same rate.
  Serial.begin(9600);
  bluetooth.begin(9600);

  // Setting the L298N and LED pins as output pins.
  pinMode(Motor1_Pin1, OUTPUT);
  pinMode(Motor1_Pin2, OUTPUT);
  pinMode(Enable1, OUTPUT);
  pinMode(Motor2_Pin1, OUTPUT);
  pinMode(Motor2_Pin2, OUTPUT);
  pinMode(Enable2, OUTPUT);
}

void loop()
{
  // Read ultrasonic sensors
  float distance1 = readUltrasonicSensor(trigPin1, echoPin1);
  float distance2 = readUltrasonicSensor(trigPin2, echoPin2);
  float distance3 = readUltrasonicSensor(trigPin3, echoPin3);

  // Check if any sensor is less than 10 cm away
  if (distance1 < 10 || distance2 < 10 || distance3 < 10)
  {
    // Stop the car if an obstacle is detected and it's not moving backward
    if (command != 'B')
    {
      stopCar();
    }
  }
  else
  {
    // Continue processing Bluetooth commands
    processBluetoothCommands();
  }
}

float readUltrasonicSensor(int trigPin, int echoPin)
{
  // Trigger ultrasonic sensor
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Read the echo pin
  float duration = pulseIn(echoPin, HIGH);

  // Calculate distance in centimeters
  float distance = duration * 0.034 / 2;

  return distance;
}

void processBluetoothCommands()
{
  if (bluetooth.available() > 0)
  {
    command = bluetooth.read();
    Serial.println(command);

    // Change pin mode only if the new command is different from the previous.
    switch (command)
    {
    case 'F': // Moving the Car Forward
      moveForward();
      break;
    case 'B': // Moving the Car Backward
      moveBackward();
      break;
    case 'L': // Moving the Car Left
      moveLeft();
      break;
    case 'R': // Moving the Car Right
      moveRight();
      break;
    case 'S': // Stop
      stopCar();
      break;
    case 'I': // Moving the Car Forward right
      moveForwardRight();
      break;
    case 'J': // Moving the Car backward right
      moveBackwardRight();
      break;
    case 'G': // Moving the Car Forward left
      moveForwardLeft();
      break;
    case 'H': // Moving the Car backward left
      moveBackwardLeft();
      break;
    case 'u': // Back light OFF
      turnOffBackLight();
      break;
    case 'V': // Horn On
      turnOnHorn();
      break;
    case 'v': // Horn OFF
      turnOffHorn();
      break;
    case 'x': // Turn ON Everything
      turnOnEverything();
      break;
    case 'X': // Turn OFF Everything
      turnOffEverything();
      break;

    default:
      // Get velocity
      if (command == 'q')
      {
        velocity = 255; // Full velocity
        analogWrite(Enable2, velocity);
      }
      else
      {
        // Chars '0' - '9' have an integer equivalence of 48 - 57, accordingly.
        if ((command >= 48) && (command <= 57))
        {
          // Subtracting 48 changes the range from 48-57 to 0-9.
          // Multiplying by 25 changes the range from 0-9 to 0-225.
          velocity = (command - 48) * 25;
          analogWrite(Enable2, velocity);
        }
      }
    }
  }
}

void moveForward()
{
  digitalWrite(Motor2_Pin1, HIGH);
  digitalWrite(Motor2_Pin2, LOW);
  digitalWrite(Motor1_Pin1, HIGH);
  digitalWrite(Motor1_Pin2, LOW);
}

void moveBackward()
{
  digitalWrite(Motor2_Pin1, LOW);
  digitalWrite(Motor2_Pin2, HIGH);
  digitalWrite(Motor1_Pin1, LOW);
  digitalWrite(Motor1_Pin2, HIGH);
}

void moveLeft()
{
  digitalWrite(Motor2_Pin1, HIGH);
  digitalWrite(Motor2_Pin2, LOW);
  digitalWrite(Motor1_Pin1, LOW);
  digitalWrite(Motor1_Pin2, LOW);
}

void moveRight()
{
  digitalWrite(Motor1_Pin2, LOW);
  digitalWrite(Motor1_Pin1, HIGH);
  digitalWrite(Motor2_Pin1, LOW);
  digitalWrite(Motor2_Pin2, LOW);
}

void stopCar()
{
  // Check if the car is moving backward before stopping
  if (command != 'B')
  {
    digitalWrite(Motor2_Pin2, LOW);
    digitalWrite(Motor2_Pin1, LOW);
    digitalWrite(Motor1_Pin2, LOW);
    digitalWrite(Motor1_Pin1, LOW);
  }
}

void moveForwardRight()
{
  digitalWrite(Motor2_Pin2, LOW);
  digitalWrite(Motor2_Pin1, HIGH);
  digitalWrite(Motor1_Pin2, LOW);
  digitalWrite(Motor1_Pin1, HIGH);
}

void moveBackwardRight()
{
  digitalWrite(Motor1_Pin2, LOW);
  digitalWrite(Motor1_Pin1, HIGH);
  digitalWrite(Motor2_Pin1, LOW);
  digitalWrite(Motor2_Pin2, HIGH);
}

void moveForwardLeft()
{
  digitalWrite(Motor2_Pin2, LOW);
  digitalWrite(Motor2_Pin1, HIGH);
  digitalWrite(Motor1_Pin1, LOW);
  digitalWrite(Motor1_Pin2, HIGH);
}

void moveBackwardLeft()
{
  digitalWrite(Motor2_Pin1, LOW);
  digitalWrite(Motor2_Pin2, HIGH);
  digitalWrite(Motor1_Pin1, LOW);
  digitalWrite(Motor1_Pin2, HIGH);
}

void turnOffBackLight()
{
  
}

void turnOnHorn()
{
  tone(12, 494);
}

void turnOffHorn()
{
  noTone(12);
}

void turnOnEverything()
{
  
}

void turnOffEverything()
{
  
}
