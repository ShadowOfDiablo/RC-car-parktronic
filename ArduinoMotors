#include <SoftwareSerial.h>
#include <LEDFader.h>

#define GREEN 13
#define BLUE 5
#define RED 4
#define delayTime 3
#define LED_NUM 3
LEDFader leds[LED_NUM] = {
  LEDFader(4),
  LEDFader(5),
  LEDFader(13)
};

int bluetoothTx = 2;
int bluetoothRx = 3;
SoftwareSerial bluetooth(bluetoothTx, bluetoothRx);

int Enable1 = 6;
int Motor1_Pin1 = 7;  
int Motor1_Pin2 = 8;  
int Motor2_Pin1 = 9; 
int Motor2_Pin2 = 10;
int Enable2 = 11; 
int front_light1 = A0;
int front_light2 = A1;
int back_light1 = A2;
int back_light2 = A3;
int horn = 12;

char command;
int velocity = 0;

void setup() {
  Serial.begin(9600);
  bluetooth.begin(9600);
  pinMode(Motor1_Pin1, OUTPUT);  
  pinMode(Motor1_Pin2, OUTPUT);
  pinMode(Enable1, OUTPUT);
  pinMode(Motor2_Pin1, OUTPUT);  
  pinMode(Motor2_Pin2, OUTPUT);
  pinMode(Enable2, OUTPUT); 
  pinMode(front_light1, OUTPUT);  
  pinMode(back_light1, OUTPUT);
  pinMode(front_light2, OUTPUT);  
  pinMode(back_light2, OUTPUT);
  pinMode(horn, OUTPUT);
  pinMode(GREEN, OUTPUT);
  pinMode(BLUE, OUTPUT);
  pinMode(RED, OUTPUT);

  digitalWrite(Enable1, HIGH);
  digitalWrite(Enable2, HIGH);
  digitalWrite(GREEN, HIGH);
  digitalWrite(BLUE, HIGH);
  digitalWrite(RED, HIGH);
}

void loop() {
  if (bluetooth.available() > 0) {
    command = bluetooth.read();
    Serial.println(command);
    handleCommand(command);
  }

  RGB();
}

void RGB() {
  // Update all LEDs and start new fades if any are done
  for (byte i = 0; i < LED_NUM; i++) {
    LEDFader *led = &leds[i];
    led->update();

    if (led->is_fading() == false) {
      int duration = random(1000, 3000);
      
      if (led->get_value() == 0) {
        byte intensity = random(100, 255);
        led->fade(intensity, duration);
      } else {
        led->fade(0, duration);
      }
    }
  }
}

void handleCommand(char cmd) {
  switch (cmd) {
    case 'F':  // Moving the Car Forward
      digitalWrite(Motor2_Pin1, HIGH);
      digitalWrite(Motor2_Pin2, LOW);
      digitalWrite(Motor1_Pin1, HIGH);
      digitalWrite(Motor1_Pin2, LOW);
      break;

    case 'B':  // Moving the Car Backward
      if (isSafeToMoveBackward()) {
        digitalWrite(Motor2_Pin1, LOW);
        digitalWrite(Motor2_Pin2, HIGH);
        digitalWrite(Motor1_Pin1, LOW);
        digitalWrite(Motor1_Pin2, HIGH);
      } else {
        // If it's not safe, stop the car
        digitalWrite(Motor2_Pin2, LOW);
        digitalWrite(Motor2_Pin1, LOW);
        digitalWrite(Motor1_Pin2, LOW);
        digitalWrite(Motor1_Pin1, LOW);
      }
      break;

    case 'L':  // Moving the Car Left
      digitalWrite(Motor2_Pin1, HIGH);
      digitalWrite(Motor2_Pin2, LOW);
      digitalWrite(Motor1_Pin1, LOW);
      digitalWrite(Motor1_Pin2, LOW);
      break;

    case 'R':  // Moving the Car Right
      digitalWrite(Motor1_Pin2, LOW);
      digitalWrite(Motor1_Pin1, HIGH);  
      digitalWrite(Motor2_Pin1, LOW);
      digitalWrite(Motor2_Pin2, LOW);
      break;

    case 'S':  // Stop
      digitalWrite(Motor2_Pin2, LOW);
      digitalWrite(Motor2_Pin1, LOW);
      digitalWrite(Motor1_Pin2, LOW);
      digitalWrite(Motor1_Pin1, LOW);
      break; 

    case 'I':  // Moving the Car Forward right
      digitalWrite(Motor2_Pin2, LOW);
      digitalWrite(Motor2_Pin1, HIGH);
      digitalWrite(Motor1_Pin2, LOW);
      digitalWrite(Motor1_Pin1, HIGH);
      break; 

    case 'J':  // Moving the Car backward right
      digitalWrite(Motor1_Pin2, LOW);
      digitalWrite(Motor1_Pin1, HIGH);
      digitalWrite(Motor2_Pin1, LOW);
      digitalWrite(Motor2_Pin2, HIGH);
      break;        

    case 'G':  // Moving the Car Forward left
      digitalWrite(Motor2_Pin2, LOW);
      digitalWrite(Motor2_Pin1, HIGH);
      digitalWrite(Motor1_Pin1, LOW);
      digitalWrite(Motor1_Pin2, HIGH);
      break; 

    case 'H':  // Moving the Car backward left
      digitalWrite(Motor2_Pin1, LOW);
      digitalWrite(Motor2_Pin2, HIGH);
      digitalWrite(Motor1_Pin1, LOW);
      digitalWrite(Motor1_Pin2, HIGH);
      break;

    case 'W':  // Front light ON 
      digitalWrite(front_light1, HIGH);
      digitalWrite(front_light2, HIGH);
      break;

    case 'w':  // Front light OFF
      digitalWrite(front_light1, LOW);
      digitalWrite(front_light2, LOW);
      break;

    case 'U':  // Back light ON 
      digitalWrite(back_light1, HIGH);
      digitalWrite(back_light2, HIGH);
      break;

    case 'u':  // Back light OFF 
      digitalWrite(back_light1, LOW);
      digitalWrite(back_light2, LOW);
      break; 

    case 'V':  // Horn On
      tone(horn,494);
      break; 

    case 'v':  // Horn OFF 
       noTone(horn);
      break;   
      
    case 'x': // Turn ON Everything
      // Add your code for turning ON everything
      break;

    case 'X': // Turn OFF Everything
      // Add your code for turning OFF everything
      break;

    default:
      // Handle any other commands or actions you may need
      break;
  }
}

bool isSafeToMoveBackward() {
  // Check the sensor readings and return true if it's safe, false otherwise
  // Implement your logic here based on the sensor readings
  // For example, you might check if all sensors detect a distance greater than SAFE_DISTANCE
  return (LeftSensor > SAFE_DISTANCE) && (FrontSensor > SAFE_DISTANCE) && (RightSensor > SAFE_DISTANCE);
}
