#include <SoftwareSerial.h> // library for bluetooth
#include <LEDFader.h>

#define GREEN 13
#define BLUE 5
#define RED 4
#define delayTime 3
#define LED_NUM 3

LEDFader leds[LED_NUM] = {
  LEDFader(4),
  LEDFader(5),
  LEDFader(13)
};

int bluetoothTx = 2;
int bluetoothRx = 3;
SoftwareSerial bluetooth(bluetoothTx, bluetoothRx);

int Enable1 = 6;
int Motor1_Pin1 = 7;
int Motor1_Pin2 = 8;

int Motor2_Pin1 = 9;
int Motor2_Pin2 = 10;
int Enable2 = 11;

int front_light1 = A0;
int front_light2 = A1;
int back_light1 = A2;
int back_light2 = A3;
int horn = 12;

char command;
int velocity = 0;

void setup() {
  Serial.begin(9600);
  bluetooth.begin(9600);

  pinMode(Motor1_Pin1, OUTPUT);
  pinMode(Motor1_Pin2, OUTPUT);
  pinMode(Enable1, OUTPUT);
  pinMode(Motor2_Pin1, OUTPUT);
  pinMode(Motor2_Pin2, OUTPUT);
  pinMode(Enable2, OUTPUT);
  pinMode(front_light1, OUTPUT);
  pinMode(back_light1, OUTPUT);
  pinMode(front_light2, OUTPUT);
  pinMode(back_light2, OUTPUT);
  pinMode(horn, OUTPUT);
  pinMode(GREEN, OUTPUT);
  pinMode(BLUE, OUTPUT);
  pinMode(RED, OUTPUT);

  digitalWrite(Enable1, HIGH);
  digitalWrite(Enable2, HIGH);
  digitalWrite(GREEN, HIGH);
  digitalWrite(BLUE, HIGH);
  digitalWrite(RED, HIGH);
}

void loop() {
  if (bluetooth.available() > 0) {
    command = bluetooth.read();
    Serial.println(command);
    
    switch (command) {
      case 'F':
        digitalWrite(Motor2_Pin1, HIGH);
        digitalWrite(Motor2_Pin2, LOW);
        digitalWrite(Motor1_Pin1, HIGH);
        digitalWrite(Motor1_Pin2, LOW);
        break;
      case 'B':
        bluetooth.write('B'); // Send the backward command
        delay(100); // Allow time for the sensor Arduino to respond

        if (bluetooth.available() > 0) {
          char response = bluetooth.read();
          if (response == 'O') { // 'O' means it's okay to move backward
            digitalWrite(Motor2_Pin1, LOW);
            digitalWrite(Motor2_Pin2, HIGH);
            digitalWrite(Motor1_Pin1, LOW);
            digitalWrite(Motor1_Pin2, HIGH);
          } else {
            // Do nothing or handle the obstacle presence as needed
          }
        }
        break;
      case 'L':
        digitalWrite(Motor2_Pin1, HIGH);
        digitalWrite(Motor2_Pin2, LOW);
        digitalWrite(Motor1_Pin1, LOW);
        digitalWrite(Motor1_Pin2, LOW);
        break;
      case 'R':
        digitalWrite(Motor1_Pin2, LOW);
        digitalWrite(Motor1_Pin1, HIGH);
        digitalWrite(Motor2_Pin1, LOW);
        digitalWrite(Motor2_Pin2, LOW);
        break;
      case 'S':
        digitalWrite(Motor2_Pin2, LOW);
        digitalWrite(Motor2_Pin1, LOW);
        digitalWrite(Motor1_Pin2, LOW);
        digitalWrite(Motor1_Pin1, LOW);
        break; 
      case 'I':
        digitalWrite(Motor2_Pin2, LOW);
        digitalWrite(Motor2_Pin1, HIGH);
        digitalWrite(Motor1_Pin2, LOW);
        digitalWrite(Motor1_Pin1, HIGH);
        break; 
      case 'J':
        digitalWrite(Motor1_Pin2, LOW);
        digitalWrite(Motor1_Pin1, HIGH);
        digitalWrite(Motor2_Pin1, LOW);
        digitalWrite(Motor2_Pin2, HIGH);
        break;        
      case 'G':
        digitalWrite(Motor2_Pin2, LOW);
        digitalWrite(Motor2_Pin1, HIGH);
        digitalWrite(Motor1_Pin1, LOW);
        digitalWrite(Motor1_Pin2, HIGH);
        break; 
      case 'H':
        digitalWrite(Motor2_Pin1, LOW);
        digitalWrite(Motor2_Pin2, HIGH);
        digitalWrite(Motor1_Pin1, LOW);
        digitalWrite(Motor1_Pin2, HIGH);
        break;
      case 'W':
        digitalWrite(front_light1, HIGH);
        digitalWrite(front_light2, HIGH);
        break;
      case 'w':
        digitalWrite(front_light1, LOW);
        digitalWrite(front_light2, LOW);
        break;
      case 'U':
        digitalWrite(back_light1, HIGH);
        digitalWrite(back_light2, HIGH);
        break;
      case 'u':
        digitalWrite(back_light1, LOW);
        digitalWrite(back_light2, LOW);
        break; 
      case 'V':
        tone(horn, 494);
        break; 
      case 'v':
        noTone(horn);
        break;   
      case 'x':
        // Turn ON Everything
        break;
      case 'X':
        // Turn OFF Everything
        break;

      default:
        if (command == 'q') {
          velocity = 255;
          analogWrite(Enable2, velocity);
        } else { 
          if ((command >= 48) && (command <= 57)) { 
            velocity = (command - 48) * 25;       
            analogWrite(Enable2, velocity);
          }
        }
    }
  }
  RGB();
}

void RGB() {
  for (byte i = 0; i < LED_NUM; i++) {
    LEDFader *led = &leds[i];
    led->update();

    if (led->is_fading() == false) {
      int duration = random(1000, 3000);

      if (led->get_value() == 0) {
        byte intensity = random(100, 255);
        led->fade(intensity, duration);
      } else {
        led->fade(0, duration);
      }
    }
  }
}
