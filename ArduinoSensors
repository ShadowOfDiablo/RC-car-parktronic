#define trigPin1 3
#define echoPin1 2
#define trigPin2 5
#define echoPin2 4
#define trigPin3 8
#define echoPin3 7

long duration, distance, RightSensor, FrontSensor, LeftSensor;

void setup() {
  Serial.begin(9600);
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  pinMode(trigPin3, OUTPUT);
  pinMode(echoPin3, INPUT);
}

void loop() {
  if (Serial.available() > 0) {
    char command = Serial.read();
    processCommand(command);
  }

  SonarSensor(trigPin1, echoPin1);
  RightSensor = distance;
  SonarSensor(trigPin2, echoPin2);
  FrontSensor = distance;
  SonarSensor(trigPin3, echoPin3);
  LeftSensor = distance;

  Serial.print(LeftSensor);
  Serial.print(",");
  Serial.print(FrontSensor);
  Serial.print(",");
  Serial.println(RightSensor);
}

void SonarSensor(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.034 / 2;
}

void processCommand(char cmd) {
  switch (cmd) {
    case 'A':
      // Respond to the request to move backward
      if (isSafeToMoveBackward()) {
        Serial.print("a"); // Signal to move backward
      } else {
        Serial.print("n"); // Signal not safe to move backward
      }
      break;

    // Add other cases as needed
    // case 'B': Handle another command

    default:
      // Handle any other commands or actions you may need
      break;
  }
}

bool isSafeToMoveBackward() {
  // Implement your logic here based on the sensor readings
  // For example, you might check if all sensors detect a distance greater than SAFE_DISTANCE
  return (LeftSensor > 10) && (FrontSensor > 10) && (RightSensor > 10);
}
